% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ipwcde.R
\name{ipwcde}
\alias{ipwcde}
\title{Controlled direct effect inverse probability weighting (IPW) estimator}
\usage{
ipwcde(
  data,
  D,
  M,
  Y,
  m = 0,
  formula_D_string,
  formula_M_string,
  base_weights_name = NULL,
  stabilize = TRUE,
  censor = TRUE,
  censor_low = 0.01,
  censor_high = 0.99,
  boot = FALSE,
  boot_reps = 1000,
  boot_conf_level = 0.95,
  boot_seed = NULL,
  boot_parallel = FALSE,
  boot_cores = max(c(parallel::detectCores() - 2, 1))
)
}
\arguments{
\item{data}{A data frame.}

\item{D}{A character scalar identifying the name of the exposure variable in
\code{data}. \code{D} is a character string, but the exposure variable it identifies
must be numeric and binary, consisting only of the values 0 and 1.}

\item{M}{A character scalar identifying the name of the mediator variable
(only one mediator variable is supported) in \code{data}. \code{D} is a character
string, but the exposure variable it identifies must be numeric and binary,
consisting only of the values 0 and 1.}

\item{Y}{A character scalar identifying the name of the outcome variable in
\code{data}. \code{Y} is a character string, but the outcome variable it identifies
must be numeric.}

\item{m}{A numeric scalar denoting a specific value to set the mediator \code{M}
to, for estimating the CDE.}

\item{formula_D_string}{A character scalar for the formula to be fitted for a
GLM of the exposure given baseline covariates (denoted in the book as
f(D|C)). E.g., \code{formula_D_string = "att22~female+black+paredu"}.}

\item{formula_M_string}{A character scalar for the formula to be fitted for a
GLM of the mediator given baseline covariates and the exposure (denoted in
the book as g(M|C,D)). E.g.,
\code{formula_M_string = "ever_unemp_age3539~female+black+paredu+att22"}.}

\item{base_weights_name}{A character scalar identifying the name of the base
weights variable in \code{data}, if applicable (e.g., if you have---and want to
use---sampling weights).}

\item{stabilize}{A logical scalar indicating whether the IPW weights should
be stabilized.}

\item{censor}{A logical scalar indicating whether the IPW weights should
be censored.}

\item{censor_low, censor_high}{A pair of arguments, each a numeric scalar
denoting a probability with values in \eqn{[0, 1]}. If the \code{censor} argument is
TRUE, then IPW weights below the \code{censor_low} quantile will be
bottom-coded, and IPW weights above the \code{censor_high} quantile will be
top-coded (before multiplying by a rescaled version of the base weights, if
applicable). E.g., if the default options of \code{censor_low = 0.01} and
\code{censor_high = 0.99} are used, then the IPW weights will be censored at
their 1st and 99th percentiles in the data.}

\item{boot}{A logical scalar indicating whether the function will perform the
nonparametric bootstrap and return a two-sided confidence interval and
p-value.}

\item{boot_reps}{An integer scalar for the number of bootstrap replications
to perform.}

\item{boot_conf_level}{A numeric scalar for the confidence level of the
bootstrap interval.}

\item{boot_seed}{An integer scalar specifying the random-number seed used in
bootstrap resampling.}

\item{boot_parallel}{A logical scalar indicating whether the bootstrap will
be performed with a parallelized loop, with the goal of reducing runtime.
Parallelized computing, as implemented in this function, requires that you
have each of the following R packages installed: \code{doParallel}, \code{doRNG}, and
\code{foreach}. (However, you do not need to load/attach these three packages
with the \code{library} function prior to running this function.) Note that the
results of the parallelized bootstrap may differ slightly from the
non-parallelized bootstrap, even if you specify the same seed, due to
differences in how the seed is processed by the two methods.}

\item{boot_cores}{An integer scalar specifying the number of CPU cores on
which the parallelized bootstrap will run. This argument only has an effect
if you requested a parallelized bootstrap (i.e., only if \code{boot} is TRUE and
\code{boot_parallel} is TRUE). By default, \code{boot_cores} is equal to the greater
of two values: (a) one and (b) the number of available CPU cores minus two.
If \code{boot_cores} equals one, then the bootstrap loop will not be
parallelized (regardless of whether \code{boot_parallel} is TRUE).}
}
\value{
By default, \code{ipwcde()} returns a list with the following elements:
\item{CDE}{A numeric scalar with the estimated controlled direct effect for
the exposure contrast 1 - 0: CDE(1,0,\code{m}).}
\item{weights}{A numeric vector with the final inverse probability weights.}
\item{model_d}{The model object from the fitted exposure model (of the
exposure given baseline covariates, denoted in the book as f(D|C)),
corresponding to \code{formula_D_string}.}
\item{model_m}{The model object from the fitted mediator model (of the
mediator given baseline covariates and the exposure, denoted in the book
as g(M|C,D)), corresponding to \code{formula_M_string}.}

If you request the bootstrap (by setting the \code{boot} argument to TRUE), then
the function returns all of the elements listed above, as well as the
following additional elements:
\item{ci_CDE}{A numeric vector with the bootstrap confidence interval for the
CDE.}
\item{pvalue_CDE}{A numeric scalar with the p-value from a two-sided test of
whether the CDE is different from zero, as computed from the bootstrap.}
\item{boot_CDE}{A numeric vector of length \code{boot_reps} comprising the CDE
estimates from all replicate samples created in the bootstrap.}
}
\description{
\code{ipwcde()} uses the inverse probability weighting (IPW) estimator to estimate
the controlled direct effect (CDE). Note that unlike the \code{ipwmed()} function,
\code{ipwcde()} requires a single mediator. Multiple mediators are not supported.
}
\details{
\code{ipwcde()} estimates controlled direct effects using inverse probability weights,
and it computes inferential statistics using the nonparametric bootstrap. To compute
the weights, \code{ipwcde()} fits the following models: (i) a logit model for exposure
conditional on baseline covariates, and (ii) a logit model for the mediator
conditional on both the exposure and baseline covariates, plus any specified
post-treatment covariates. These models are used to generate inverse probability
weights, which are then applied to fit an outcome model and estimate the controlled
direct effect.
}
\examples{
# Example 1
## Prepare data
data(nlsy)
covariates <- c(
  "female",
  "black",
  "hispan",
  "paredu",
  "parprof",
  "parinc_prank",
  "famsize",
  "afqt3"
)
nlsy1 <- nlsy
key_variables1 <- c(
  "cesd_age40",
  "ever_unemp_age3539",
  "att22",
  covariates
)
nlsy1 <- nlsy1[complete.cases(nlsy1[,key_variables1]),]
nlsy1$std_cesd_age40 <-
  (nlsy1$cesd_age40 - mean(nlsy1$cesd_age40)) /
  sd(nlsy1$cesd_age40)
## Estimate CDE for m=1
out1 <- ipwcde(
  data = nlsy1,
  D = "att22",
  M = "ever_unemp_age3539",
  Y = "std_cesd_age40",
  m = 1,
  formula_D_string = "att22~female+black+hispan+paredu+parprof+parinc_prank+
  famsize+afqt3",
  formula_M_string = "ever_unemp_age3539~att22+female+black+hispan+paredu+
  parprof+parinc_prank+famsize+afqt3"
)
head(out1,1)

# Example 2: Incorporating sampling weights
out2 <- ipwcde(
  data = nlsy1,
  D = "att22",
  M = "ever_unemp_age3539",
  Y = "std_cesd_age40",
  m = 1,
  formula_D_string = "att22~female+black+hispan+paredu+parprof+parinc_prank+
  famsize+afqt3",
  formula_M_string = "ever_unemp_age3539~att22+female+black+hispan+paredu+
  parprof+parinc_prank+famsize+afqt3",
  base_weights_name = "weight"
)
head(out2,1)

# Example 3: Perform a nonparametric bootstrap, with 2,000 replications
\dontrun{
  out3 <- ipwcde(
    data = nlsy1,
    D = "att22",
    M = "ever_unemp_age3539",
    Y = "std_cesd_age40",
    m = 1,
    formula_D_string = "att22~female+black+hispan+paredu+parprof+parinc_prank+
    famsize+afqt3",
    formula_M_string = "ever_unemp_age3539~att22+female+black+hispan+paredu+
    parprof+parinc_prank+famsize+afqt3",
    boot = TRUE,
    boot_reps = 2000,
    boot_seed = 1234
  )
  out3[c(
    "CDE",
    "ci_CDE",
    "pvalue_CDE"
  )]
}

# Example 4: Parallelize the bootstrap, to attempt to reduce runtime
\dontrun{
  out4 <- ipwcde(
    data = nlsy1,
    D = "att22",
    M = "ever_unemp_age3539",
    Y = "std_cesd_age40",
    m = 1,
    formula_D_string = "att22~female+black+hispan+paredu+parprof+parinc_prank+
    famsize+afqt3",
    formula_M_string = "ever_unemp_age3539~att22+female+black+hispan+paredu+
    parprof+parinc_prank+famsize+afqt3",
    boot = TRUE,
    boot_reps = 2000,
    boot_seed = 1234,
    boot_parallel = TRUE
  )
  out4[c(
    "CDE",
    "ci_CDE",
    "pvalue_CDE"
  )]
}
}
