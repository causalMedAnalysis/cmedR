% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ipwmed.R
\name{ipwmed}
\alias{ipwmed}
\title{Inverse probability weighting (IPW) estimator for natural effects}
\usage{
ipwmed(
  data,
  D,
  M,
  Y,
  formula1_string,
  formula2_string,
  base_weights_name = NULL,
  stabilize = TRUE,
  censor = TRUE,
  censor_low = 0.01,
  censor_high = 0.99,
  boot = FALSE,
  boot_reps = 1000,
  boot_conf_level = 0.95,
  boot_seed = NULL,
  boot_parallel = FALSE,
  boot_cores = max(c(parallel::detectCores() - 2, 1))
)
}
\arguments{
\item{data}{A data frame.}

\item{D}{A character scalar identifying the name of the exposure variable in
\code{data}. \code{D} is a character string, but the exposure variable it identifies
must be numeric.}

\item{M}{A character vector (of one or more elements) identifying the names
of the mediator variables in \code{data}. If you are estimating univariate
natural effects (with a single mediator), \code{M} should be a character scalar
(a vector with only one element)---e.g., \code{M = "ever_unemp_age3539"}. If you
are estimating multivariate natural effects (with multiple mediators), \code{M}
should be a character vector identifying all of the mediators---e.g.,
\code{M = c("ever_unemp_age3539", "log_faminc_adj_age3539")}.}

\item{Y}{A character scalar identifying the name of the outcome variable in
\code{data}. \code{Y} is a character string, but the outcome variable it identifies
must be numeric.}

\item{formula1_string}{A character scalar for the formula to be fitted for a
GLM of the exposure given baseline covariates (denoted in the book as
f(D|C)). E.g., \code{formula1_string = "att22~female+black+paredu"}.}

\item{formula2_string}{A character scalar for the formula to be fitted for a
GLM of the exposure given baseline covariates and the mediator (denoted in
the book as s(D|C,M)). E.g.,
\code{formula2_string = "att22~female+black+paredu+ever_unemp_age3539"}.}

\item{base_weights_name}{A character scalar identifying the name of the base
weights variable in \code{data}, if applicable (e.g., if you have---and want to
use---sampling weights).}

\item{stabilize}{A logical scalar indicating whether the IPW weights should
be stabilized (multiplied by the marginal probabilities of the exposure).}

\item{censor}{A logical scalar indicating whether the IPW weights should
be censored.}

\item{censor_low, censor_high}{A pair of arguments, each a numeric scalar
denoting a probability with values in \eqn{[0, 1]}. If the \code{censor} argument is
TRUE, then IPW weights below the \code{censor_low} quantile will be
bottom-coded, and IPW weights above the \code{censor_high} quantile will be
top-coded (before multiplying by a rescaled version of the base weights, if
applicable). E.g., if the default options of \code{censor_low = 0.01} and
\code{censor_high = 0.99} are used, then the IPW weights will be censored at
their 1st and 99th percentiles in the data.}

\item{boot}{A logical scalar indicating whether the function will perform the
nonparametric bootstrap and return two-sided confidence intervals and
p-values.}

\item{boot_reps}{An integer scalar for the number of bootstrap replications
to perform.}

\item{boot_conf_level}{A numeric scalar for the confidence level of the
bootstrap interval.}

\item{boot_seed}{An integer scalar specifying the random-number seed used in
bootstrap resampling.}

\item{boot_parallel}{A logical scalar indicating whether the bootstrap will
be performed with a parallelized loop, with the goal of reducing runtime.
Parallelized computing, as implemented in this function, requires that you
have each of the following R packages installed: \code{doParallel}, \code{doRNG}, and
\code{foreach}. (However, you do not need to load/attach these three packages
with the \code{library} function prior to running this function.) Note that the
results of the parallelized bootstrap may differ slightly from the
non-parallelized bootstrap, even if you specify the same seed, due to
differences in how the seed is processed by the two methods.}

\item{boot_cores}{An integer scalar specifying the number of CPU cores on
which the parallelized bootstrap will run. This argument only has an effect
if you requested a parallelized bootstrap (i.e., only if \code{boot} is TRUE and
\code{boot_parallel} is TRUE). By default, \code{boot_cores} is equal to the greater
of two values: (a) one and (b) the number of available CPU cores minus two.
If \code{boot_cores} equals one, then the bootstrap loop will not be
parallelized (regardless of whether \code{boot_parallel} is TRUE).}
}
\value{
By default, \code{ipwmed()} returns a list with the following elements:
\item{ATE}{A numeric scalar with the estimated total average treatment effect
for the exposure contrast 1 - 0: ATE(1,0).}
\item{NDE}{A numeric scalar with the estimated natural direct effect for the
exposure contrast 1 - 0: NDE(1,0).}
\item{NIE}{A numeric scalar with the estimated natural indirect effect for
the exposure contrast 1 - 0: NIE(1,0).}
\item{weights1}{A numeric vector with the final inverse probability weights
for w_1, as defined in the book.}
\item{weights2}{A numeric vector with the final inverse probability weights
for w_2, as defined in the book.}
\item{weights3}{A numeric vector with the final inverse probability weights
for w_3, as defined in the book.}
\item{model_d1}{The model object from the first fitted exposure model
(of the exposure given baseline covariates, denoted in the book as f(D|C)),
corresponding to \code{formula1_string}.}
\item{model_d2}{The model object from the second fitted exposure model
(of the exposure given baseline covariates and the mediator(s), denoted in
the book as s(D|C,M)), corresponding to \code{formula2_string}.}

If you request the bootstrap (by setting the \code{boot} argument to TRUE), then
the function returns all of the elements listed above, as well as the
following additional elements:
\item{ci_ATE}{A numeric vector with the bootstrap confidence interval for the
total average treatment effect (ATE).}
\item{ci_NDE}{A numeric vector with the bootstrap confidence interval for the
natural direct effect (NDE).}
\item{ci_NIE}{A numeric vector with the bootstrap confidence interval for the
natural indirect effect (NIE).}
\item{pvalue_ATE}{A numeric scalar with the p-value from a two-sided test of
whether the ATE is different from zero, as computed from the bootstrap.}
\item{pvalue_NDE}{A numeric scalar with the p-value from a two-sided test of
whether the NDE is different from zero, as computed from the bootstrap.}
\item{pvalue_NIE}{A numeric scalar with the p-value from a two-sided test of
whether the NIE is different from zero, as computed from the bootstrap.}
\item{boot_ATE}{A numeric vector of length \code{boot_reps} comprising the ATE
estimates from all replicate samples created in the bootstrap.}
\item{boot_NDE}{A numeric vector of length \code{boot_reps} comprising the NDE
estimates from all replicate samples created in the bootstrap.}
\item{boot_NIE}{A numeric vector of length \code{boot_reps} comprising the NIE
estimates from all replicate samples created in the bootstrap.}
}
\description{
\code{ipwmed()} uses the inverse probability weighting (IPW) estimator to estimate
the total effect (ATE), natural direct effect (NDE), and natural indirect
effect (NIE). The function supports estimation of both univariate and
multivariate natural effects.
}
\details{
\code{ipwmed()} performs causal mediation analysis using inverse probability weighting,
and it computes inferential statistics using the nonparametric bootstrap. It estimates
two models to construct the weights: a logit model for the exposure conditional on
baseline covariates (if specified), and another logit model for the exposure conditional
on the mediator(s) and the baseline covariates. Using these weights, \code{ipwmed()} estimates the
total, natural direct, and natural indirect effects when a single mediator is specified.
When multiple mediators are specified, it provides estimates for the total effect and
the multivariate natural direct and indirect effects operating through the entire set of
mediators.
}
\examples{
# Example 1: Single mediator
## Prepare data
data(nlsy)
covariates <- c(
  "female",
  "black",
  "hispan",
  "paredu",
  "parprof",
  "parinc_prank",
  "famsize",
  "afqt3"
)
nlsy1 <- nlsy
key_variables1 <- c(
  "cesd_age40",
  "ever_unemp_age3539",
  "att22",
  covariates
)
nlsy1 <- nlsy1[complete.cases(nlsy1[,key_variables1]),]
nlsy1$std_cesd_age40 <-
  (nlsy1$cesd_age40 - mean(nlsy1$cesd_age40)) /
  sd(nlsy1$cesd_age40)
## Estimate natural effects
out1 <- ipwmed(
  data = nlsy1,
  D = "att22",
  M = "ever_unemp_age3539",
  Y = "std_cesd_age40",
  formula1_string = "att22~female+black+hispan+paredu+parprof+parinc_prank+
  famsize+afqt3",
  formula2_string = "att22~female+black+hispan+paredu+parprof+parinc_prank+
  famsize+afqt3+ever_unemp_age3539"
)
head(out1,3)

# Example 2: Incorporating sampling weights
out2 <- ipwmed(
  data = nlsy1,
  D = "att22",
  M = "ever_unemp_age3539",
  Y = "std_cesd_age40",
  formula1_string = "att22~female+black+hispan+paredu+parprof+parinc_prank+
  famsize+afqt3",
  formula2_string = "att22~female+black+hispan+paredu+parprof+parinc_prank+
  famsize+afqt3+ever_unemp_age3539",
  base_weights_name = "weight"
)
head(out2,3)

# Example 3: Multiple mediators
## Prepare data
nlsy2 <- nlsy
key_variables2 <- c(
  key_variables1,
  "log_faminc_adj_age3539"
)
nlsy2 <- nlsy2[complete.cases(nlsy2[,key_variables2]),]
nlsy2$std_cesd_age40 <-
  (nlsy2$cesd_age40 - mean(nlsy2$cesd_age40)) /
  sd(nlsy2$cesd_age40)
## Estimate natural effects
out3 <- ipwmed(
  data = nlsy2,
  D = "att22",
  M = c("ever_unemp_age3539", "log_faminc_adj_age3539"),
  Y = "std_cesd_age40",
  formula1_string = "att22~female+black+hispan+paredu+parprof+parinc_prank+
  famsize+afqt3",
  formula2_string = "att22~female+black+hispan+paredu+parprof+parinc_prank+
  famsize+afqt3+ever_unemp_age3539+log_faminc_adj_age3539"
)
head(out3,3)

# Example 4: Perform a nonparametric bootstrap, with 2,000 replications
\dontrun{
  out4 <- ipwmed(
    data = nlsy1,
    D = "att22",
    M = "ever_unemp_age3539",
    Y = "std_cesd_age40",
    formula1_string = "att22~female+black+hispan+paredu+parprof+parinc_prank+
    famsize+afqt3",
    formula2_string = "att22~female+black+hispan+paredu+parprof+parinc_prank+
    famsize+afqt3+ever_unemp_age3539",
    boot = TRUE,
    boot_reps = 2000,
    boot_seed = 1234
  )
  out4[c(
    "ATE",
    "NDE",
    "NIE",
    "ci_ATE",
    "ci_NDE",
    "ci_NIE",
    "pvalue_ATE",
    "pvalue_NDE",
    "pvalue_NIE"
  )]
}

# Example 5: Parallelize the bootstrap, to attempt to reduce runtime
\dontrun{
  out5 <- ipwmed(
    data = nlsy1,
    D = "att22",
    M = "ever_unemp_age3539",
    Y = "std_cesd_age40",
    formula1_string = "att22~female+black+hispan+paredu+parprof+parinc_prank+
    famsize+afqt3",
    formula2_string = "att22~female+black+hispan+paredu+parprof+parinc_prank+
    famsize+afqt3+ever_unemp_age3539",
    boot = TRUE,
    boot_reps = 2000,
    boot_seed = 1234,
    boot_parallel = TRUE
  )
  out5[c(
    "ATE",
    "NDE",
    "NIE",
    "ci_ATE",
    "ci_NDE",
    "ci_NIE",
    "pvalue_ATE",
    "pvalue_NDE",
    "pvalue_NIE"
  )]
}
}
