% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rwrlite.R
\name{rwrlite}
\alias{rwrlite}
\title{Regression-with-residuals estimator for interventional effects}
\usage{
rwrlite(
  data,
  D,
  C = NULL,
  d = 1,
  dstar = 0,
  m = 0,
  Y_formula,
  M_formula,
  M_family = gaussian,
  L_formula_list,
  weights = NULL,
  boot = FALSE,
  boot_reps = 1000,
  boot_conf_level = 0.95,
  boot_seed = NULL,
  boot_parallel = FALSE,
  boot_cores = max(c(parallel::detectCores() - 2, 1))
)
}
\arguments{
\item{data}{A data frame.}

\item{D}{A character scalar identifying the name of the exposure variable in
\code{data}. \code{D} is a character string, but the exposure variable it identifies
must be numeric.}

\item{C}{A character vector (of one or more elements) identifying the names
of the covariate variables in \code{data} that you wish to include in both the
mediator and outcome models. If there are no such covariates you wish to
include, leave \code{C} as its default null argument.}

\item{d, dstar}{A pair of arguments, each a numeric scalar denoting a specific
value of the exposure \code{D}. The exposure contrast of interest is
\code{d - dstar}.}

\item{m}{A numeric scalar denoting a specific value to set the mediator to,
for estimating the CDE.}

\item{Y_formula}{A formula object for the outcome model.}

\item{M_formula}{A formula object for the mediator model.}

\item{M_family}{The family for the mediator model, to be supplied to the
\code{glm} function. The family describes the error distribution and link
function to be used in the mediator model. As the \code{glm} documentation
describes, the family can be either a character string naming a family
function, a family function, or the result of a call to a family function.}

\item{L_formula_list}{A list of formula objects, one for each exposure-
induced confounder model.}

\item{weights}{An optional numeric vector of weights to be used in fitting
each of the models (the exposure-induced confounder model(s), the mediator
model, and the outcome model).}

\item{boot}{A logical scalar indicating whether the function will perform the
nonparametric bootstrap and return two-sided confidence intervals and
p-values.}

\item{boot_reps}{An integer scalar for the number of bootstrap replications
to perform.}

\item{boot_conf_level}{A numeric scalar for the confidence level of the
bootstrap interval.}

\item{boot_seed}{An integer scalar specifying the random-number seed used in
bootstrap resampling.}

\item{boot_parallel}{A logical scalar indicating whether the bootstrap will
be performed with a parallelized loop, with the goal of reducing runtime.
Parallelized computing, as implemented in this function, requires that you
have each of the following R packages installed: \code{doParallel}, \code{doRNG}, and
\code{foreach}. (However, you do not need to load/attach these three packages
with the \code{library} function prior to running this function.) Note that the
results of the parallelized bootstrap may differ slightly from the
non-parallelized bootstrap, even if you specify the same seed, due to
differences in how the seed is processed by the two methods.}

\item{boot_cores}{An integer scalar specifying the number of CPU cores on
which the parallelized bootstrap will run. This argument only has an effect
if you requested a parallelized bootstrap (i.e., only if \code{boot} is TRUE and
\code{boot_parallel} is TRUE). By default, \code{boot_cores} is equal to the greater
of two values: (a) one and (b) the number of available CPU cores minus two.
If \code{boot_cores} equals one, then the bootstrap loop will not be
parallelized (regardless of whether \code{boot_parallel} is TRUE).}
}
\value{
By default, \code{rwrlite()} returns a list with the following elements:
\item{OE}{A numeric scalar with the estimated overall effect for the exposure
contrast \code{d - dstar}: OE(\code{d},\code{dstar}).}
\item{IDE}{A numeric scalar with the estimated interventional direct effect
for the exposure contrast \code{d - dstar}: IDE(\code{d},\code{dstar}).}
\item{IIE}{A numeric scalar with the estimated interventional indirect effect
for the exposure contrast \code{d - dstar}: IIE(\code{d},\code{dstar}).}
\item{CDE}{A numeric scalar with the estimated controlled direct effect for
the exposure contrast \code{d - dstar} and the mediator value \code{m}:
CDE(\code{d},\code{dstar},\code{m}).}
\item{models_L}{A list with the model objects from each of the fitted
exposure-induced confounder models.}
\item{model_M}{The model object from the fitted mediator model.}
\item{model_Y}{The model object from the fitted outcome model.}
\item{data_ed}{A version of the data frame supplied by the user in the \code{data}
argument, but with mean-centered covariates and residualized exposure-
induced confounders.}

If you request the bootstrap (by setting the \code{boot} argument to TRUE), then
the function returns all of the elements listed above, as well as the
following additional elements:
\item{ci_OE}{A numeric vector with the bootstrap confidence interval for the
overall effect (OE).}
\item{ci_IDE}{A numeric vector with the bootstrap confidence interval for the
interventional direct effect (IDE).}
\item{ci_IIE}{A numeric vector with the bootstrap confidence interval for the
interventional indirect effect (IIE).}
\item{ci_CDE}{A numeric vector with the bootstrap confidence interval for the
controlled direct effect (CDE).}
\item{pvalue_OE}{A numeric scalar with the p-value from a two-sided test of
whether the OE is different from zero, as computed from the bootstrap.}
\item{pvalue_IDE}{A numeric scalar with the p-value from a two-sided test of
whether the IDE is different from zero, as computed from the bootstrap.}
\item{pvalue_IIE}{A numeric scalar with the p-value from a two-sided test of
whether the IIE is different from zero, as computed from the bootstrap.}
\item{pvalue_CDE}{A numeric scalar with the p-value from a two-sided test of
whether the CDE is different from zero, as computed from the bootstrap.}
\item{boot_OE}{A numeric vector of length \code{boot_reps} comprising the OE
estimates from all replicate samples created in the bootstrap.}
\item{boot_IDE}{A numeric vector of length \code{boot_reps} comprising the IDE
estimates from all replicate samples created in the bootstrap.}
\item{boot_IIE}{A numeric vector of length \code{boot_reps} comprising the IIE
estimates from all replicate samples created in the bootstrap.}
\item{boot_CDE}{A numeric vector of length \code{boot_reps} comprising the CDE
estimates from all replicate samples created in the bootstrap.}
}
\description{
\code{rwrlite()} is a wrapper for two functions from the \code{rwrmed} package. It
implements the regression-with-residuals (RWR) estimator for interventional
effects, producing estimates of the overall effect (OE), interventional
direct effect (IDE), interventional indirect effect (IIE), and controlled
direct effect (CDE).
}
\details{
\code{rwrlite()} estimates interventional and controlled direct effects as follows: (i) it
fits a model for the mediator conditional on treatment and the baseline covariates, after
centering these covariates around their sample means, and (ii) it fits a model for the
outcome conditional on treatment, the mediator, the baseline covariates after centering them
around their sample means, and any exposure-induced covariates after residualizing them with
respect to the treatment and baseline covariates. These models then allow for estimation of
controlled direct effects, interventional direct effects, interventional indirect effects,
and the overall effect, using simple functions of their parameters. Inferential statistics
are computed with the nonparametric bootstrap.
}
\examples{
# Example 1: With one exposure-induced confounder
## Prepare data
data(nlsy)
covariates <- c(
  "female",
  "black",
  "hispan",
  "paredu",
  "parprof",
  "parinc_prank",
  "famsize",
  "afqt3"
)
key_variables <- c(
  "cesd_age40",
  "ever_unemp_age3539",
  "log_faminc_adj_age3539",
  "att22",
  covariates
)
nlsy <- nlsy[complete.cases(nlsy[,key_variables]),]
nlsy$std_cesd_age40 <-
  (nlsy$cesd_age40 - mean(nlsy$cesd_age40)) /
  sd(nlsy$cesd_age40)

## Define model formulae
formula_L <- ever_unemp_age3539 ~ att22+female+black+hispan+paredu+parprof+
parinc_prank+famsize+afqt3
formula_M <- log_faminc_adj_age3539 ~ att22+female+black+hispan+paredu+parprof+
parinc_prank+famsize+afqt3
formula_Y <- std_cesd_age40 ~ att22*log_faminc_adj_age3539+ever_unemp_age3539+
  female+black+hispan+paredu+parprof+parinc_prank+famsize+afqt3

## Estimate interventional effects
out1 <- rwrlite(
  data = nlsy,
  D = "att22",
  C = covariates,
  m = log(5e4), # evaluates the CDE at log_faminc_adj_age3539 = log(5e4)
  Y_formula = formula_Y,
  M_formula = formula_M,
  L_formula_list = list(formula_L)
)
head(out1,4)

# Example 2: Incorporating sampling weights
out2 <- rwrlite(
  data = nlsy,
  D = "att22",
  C = covariates,
  m = log(5e4),
  Y_formula = formula_Y,
  M_formula = formula_M,
  L_formula_list = list(formula_L),
  weights = nlsy$weight
)
head(out2,4)

# Example 3: Perform a nonparametric bootstrap, with 2,000 replications
\dontrun{
  out3 <- rwrlite(
    data = nlsy,
    D = "att22",
    C = covariates,
    m = log(5e4),
    Y_formula = formula_Y,
    M_formula = formula_M,
    L_formula_list = list(formula_L),
    boot = TRUE,
    boot_reps = 2000,
    boot_seed = 1234
  )
  out3[c(
    "OE",
    "IDE",
    "IIE",
    "ci_OE",
    "ci_IDE",
    "ci_IIE",
    "pvalue_OE",
    "pvalue_IDE",
    "pvalue_IIE"
  )]
}

# Example 4: Parallelize the bootstrap, to attempt to reduce runtime
\dontrun{
  out4 <- rwrlite(
    data = nlsy,
    D = "att22",
    C = covariates,
    m = log(5e4),
    Y_formula = formula_Y,
    M_formula = formula_M,
    L_formula_list = list(formula_L),
    boot = TRUE,
    boot_reps = 2000,
    boot_seed = 1234,
    boot_parallel = TRUE
  )
  out4[c(
    "OE",
    "IDE",
    "IIE",
    "ci_OE",
    "ci_IDE",
    "ci_IIE",
    "pvalue_OE",
    "pvalue_IDE",
    "pvalue_IIE"
  )]
}

# Example 5: With two exposure-induced confounders
# Prepare data
data(nlsy)
covariates <- c(
  "female",
  "black",
  "hispan",
  "paredu",
  "parprof",
  "parinc_prank",
  "famsize",
  "afqt3"
)
key_variables5 <- c(
  "cesd_age40",
  "ever_unemp_age3539",
  "cesd_1992",
  "log_faminc_adj_age3539",
  "att22",
  covariates
)
nlsy <- nlsy[complete.cases(nlsy[,key_variables5]),]
nlsy$std_cesd_age40 <-
  (nlsy$cesd_age40 - mean(nlsy$cesd_age40)) /
  sd(nlsy$cesd_age40)

# Define model formulae
formula_L1 <- ever_unemp_age3539 ~ att22+female+black+hispan+paredu+parprof+
parinc_prank+famsize+afqt3
formula_L2 <- cesd_1992 ~ att22+female+black+hispan+paredu+
parprof+parinc_prank+famsize+afqt3
formula_M <- log_faminc_adj_age3539 ~ att22+female+black+hispan+paredu+parprof+
parinc_prank+famsize+afqt3
formula_Y <- std_cesd_age40 ~ att22*log_faminc_adj_age3539+ever_unemp_age3539+
  cesd_1992+female+black+hispan+paredu+parprof+parinc_prank+famsize+afqt3

# Estimate interventional effects
out5 <- rwrlite(
  data = nlsy,
  D = "att22",
  C = covariates,
  m = log(5e4), # evaluates the CDE at log_faminc_adj_age3539 = log(5e4)
  Y_formula = formula_Y,
  M_formula = formula_M,
  L_formula_list = list(formula_L1, formula_L2)
)
head(out5,4)
}
